ENTRY_POINT:
.MACRO LDA64 x
LDA 7, %x
LDA 6, %x + 1
LDA 5, %x + 2
LDA 4, %x + 3
LDA 3, %x + 4
LDA 2, %x + 5
LDA 1, %x + 6
LDA 0, %x + 7
.ENMAC

.MACRO LDB64 x
SWP
LDA64 %x
SWP
.ENMAC

.MACRO LDB x, y
SWP
LDA %x, %y
SWP
.ENMAC

; Set B to 0
.MACRO SETBZ
; a = ? b = 0|1
CMPAB
SWP
v:
VOID 0
LDB 0, v + 1
.ENMAC

.MACRO JMP addr
SETBZ
JMPBZ %addr
.ENMAC

.MACRO CALL addr
LDPCA
.ENMAC

$DEF CALLSTACK_SIZE 0x400
$DEF STACK_SIZE 0xC00

$DEF CALLSTACK 0x0800
$DEF STACK CALLSTACK + CALLSTACK_SIZE
$DEF P_STDIN STACK + STACK_SIZE
$DEF P_STDOUT P_STDIN + 2
$DEF P_CALLSTACK P_STDOUT + 2
$DEF P_STACK P_CALLSTACK + 2
; STDLIB Memory
; Entry: 0x0800
; Callstack: 0x0800 - 0x0BFF
; Stack: 0x0C00 - 0x17FF
; *STDIN: 0x1800 - 0x1801
; *STDOUT: 0x1802 - 0x1803
; *Callstack: 0x1804 - 0x1805
; *Stack: 0x1806 - 0x1807
; Reserved: 0x1808 - 0x18FF

$DEF RETURN 0x0000
; 0x0000 = Return Code

; Jump ahead to clear memory for call stack and stack
; Round up to nearest 0x0100
VOID P_STACK + 0x0100
_CSLDA:
LDA 1, ENTRY_POINT + 7
_CSJMPA:
JMPA

$PC ENTRY_POINT + STACK_SIZE

; Set Callstack to 0
SWP
STA CALLSTACK, 0
STA _CSLDA, 0
STA _CSLDA + 1, 0
STA _CSLDA + 8, 0
STA _CSLDA + 9, 0
STA _CSJMPA, 0
