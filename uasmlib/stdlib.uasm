ENTRY_POINT:

$INCLUDE <uasmlib/stdlib_macros.uasm>

$DEF CALLSTACK_SIZE 0x400
$DEF STACK_SIZE 0xC00

$DEF CALLSTACK 0x0800
$DEF STACK CALLSTACK + CALLSTACK_SIZE
$DEF P_STDIN STACK + STACK_SIZE
$DEF P_STDOUT P_STDIN + 2
$DEF P_CALLSTACK P_STDOUT + 2
$DEF P_STACK P_CALLSTACK + 2
; STDLIB Memory
; Entry: 0x0800
; Callstack: 0x0800 - 0x0BFF
; Stack: 0x0C00 - 0x17FF
; *STDIN: 0x1800 - 0x1801
; *STDOUT: 0x1802 - 0x1803
; *Callstack: 0x1804 - 0x1805
; *Stack: 0x1806 - 0x1807
; Reserved: 0x1808 - 0x18FF

$DEF TEMP 0x1900
; Temp memory for critical macros
$DEF TEMP_INC TEMP
$DEF TEMP_INC_ADDR TEMP + 8
$DEF TEMP_PUSH TEMP_INC_ADDR + 8
$DEF TEMP_SET TEMP_PUSH + 8
$DEF TEMP_CALL TEMP_SET + 8
$DEF TEMP_RET TEMP_CALL + 16
$DEF TEMP_PUT TEMP_RET + 16

$DEF RETURN 0x0000
; 0x0000 = Return Code

; Jump ahead to clear memory for call stack, stack and temp
; Round up to nearest 0x0100
VOID TEMP + 0x0100
_CSLDA:
LDA 1, ENTRY_POINT + 7
_CSJMPA:
JMPA

$PC 0x1A00

; Set Callstack to 0
SWP
STA CALLSTACK, 0
STA _CSLDA, 0
STA _CSLDA + 1, 0
STA _CSLDA + 8, 0
STA _CSLDA + 9, 0
STA _CSJMPA, 0

; Initialize Pointers
SET16 P_STDIN, 0x000
SET16 P_STDOUT, 0x400
SET16 P_CALLSTACK, CALLSTACK
SET16 P_STACK, STACK

FPRINT "Hello Wo"
FPRINT "rld, wel"
FPRINT "come to "
FPRINT "the UNIB"
FPRINT "L Standa"
FPRINT "rd Libra"
FPRINT "ry!\n"
