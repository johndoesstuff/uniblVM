JMP _PRINT_ENDLIB

.MACRO INC_P_STDOUT
v:
VOID 0
LDA64 v + 1
LDA 0, P_STDOUT, 2
INCA16
STA P_STDOUT, 0, 2
.ENMAC

.MACRO PRINTA
CALL _PRINT_PRINTA
.ENMAC

_PRINT_PRINTA:
JMP _PRINT_PRINTA_DIGIT_MASK
_PRINT_PRINTA_DIGITS:
$DUMP <0123456789ABCDEF>
_PRINT_PRINTA_DIGIT_MASK:
VOID 0
_PRINT_PRINTA_DIGIT_MASK_INIT:
VOID 0xF000000000000000
_PRINT_PRINTA_I:
VOID 0
_PRINT_PRINTA_I_INIT:
VOID 60
_PRINT_PRINTA_DIGIT:
VOID 0
_PRINT_PRINTA_TEMP:
VOID 0
_PRINT_PRINTA_A:
VOID 0
_PRINT_PRINTA_B:
VOID 0
_PRINT_PRINTA_4:
VOID 4
STA64 _PRINT_PRINTA_A + 1
STB64 _PRINT_PRINTA_B + 1
STA64 _PRINT_PRINTA_TEMP + 1
; init
LDA64 _PRINT_PRINTA_DIGIT_MASK_INIT + 1
STA64 _PRINT_PRINTA_DIGIT_MASK + 1
LDA64 _PRINT_PRINTA_I_INIT + 1
STA64 _PRINT_PRINTA_I + 1
_PRINT_PRINTA_LOOP:
; get digits
LDA64 _PRINT_PRINTA_I + 1
STA _PRINT_PRINTA_SHRA + 1, 0, 1
LDA64 _PRINT_PRINTA_A + 1
LDB64 _PRINT_PRINTA_DIGIT_MASK + 1
HALT
ANDAB
HALT
; shift digits by i to first index
_PRINT_PRINTA_SHRA:
SHRA 0
; b = digit val
SWP
; offset pointer
_PRINT_PRINTA_DIGITS_P:
VOID _PRINT_PRINTA_DIGITS
LDA64 _PRINT_PRINTA_DIGITS_P + 1
ADDAB
SWP
; ascii code of digit
STB64 _PRINT_PRINTA_LDA + 2
_PRINT_PRINTA_LDA:
LDA 0, 0, 1
; print ascii of digit
PUTA8
; shr mask
LDA64 _PRINT_PRINTA_DIGIT_MASK + 1
SHRA 4
STA64 _PRINT_PRINTA_DIGIT_MASK + 1
; dec i 4
LDB64 _PRINT_PRINTA_4 + 1
LDA64 _PRINT_PRINTA_I + 1
SUBAB
STA64 _PRINT_PRINTA_I + 1
; break b == 0
SWP
JMPBZ _PRINT_PRINTA_DONE
JMP _PRINT_PRINTA_LOOP
_PRINT_PRINTA_DONE:
RET

_PRINT_ENDLIB:
