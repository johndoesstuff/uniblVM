; 64 Bit storage macros

; 2 of the longest standing opcodes killed by width introduction
; your contributions to the codebase will not be forgotten
; fly high LDAB and STAB <3
.MACRO LDAB offset, width
STB64 lda_pc + 2
lda_pc:
LDA %offset + 8 - %width, 0, %width
.ENMAC

.MACRO STAB offset, width
STB64 lda_pc + 1
lda_pc:
STA 0, %offset + 8 - %width, %width
.ENMAC

.MACRO LDA64 x
LDA 0, %x, 8
.ENMAC

.MACRO LDA64R x
LDA 7, %x, 1
LDA 6, %x + 1, 1
LDA 5, %x + 2, 1
LDA 4, %x + 3, 1
LDA 3, %x + 4, 1
LDA 2, %x + 5, 1
LDA 1, %x + 6, 1
LDA 0, %x + 7, 1
.ENMAC

.MACRO LDB64 x
SWP
LDA64 %x
SWP
.ENMAC

.MACRO LDB64R x
SWP
LDA64R %x
SWP
.ENMAC

.MACRO STA64 x
STA %x, 0, 8
.ENMAC

.MACRO STA64R x
STA %x, 7, 1
STA %x + 1, 6, 1
STA %x + 2, 5, 1
STA %x + 3, 4, 1
STA %x + 4, 3, 1
STA %x + 5, 2, 1
STA %x + 6, 1, 1
STA %x + 7, 0, 1
.ENMAC

.MACRO STB64 x
SWP
STA64 %x
SWP
.ENMAC

.MACRO STB64R x
SWP
STA64R %x
SWP
.ENMAC

; 16 Bit storage macros
.MACRO LDA16 x
LDA 0, %x, 2
.ENMAC

.MACRO LDB16 x
SWP
LDA16 %x
SWP
.ENMAC

.MACRO STA16 x
STA %x, 0, 2
.ENMAC

.MACRO STB16 x
SWP
STA16 %x
SWP
.ENMAC

; General purpose macros
.MACRO LDB x, y, z
SWP
LDA %x, %y, %z
SWP
.ENMAC

.MACRO STB x, y, z
SWP
STA %x, %y, %z
SWP
.ENMAC

.MACRO LDPCA
pc:
VOID pc
LDA 0, pc + 1, 8
.ENMAC

; Set B to 0
.MACRO SETBZ
v:
VOID 0
LDB 0, v + 1, 8
.ENMAC

.MACRO SETAZ
SWP
CMPAB
SWP
v:
VOID 0
LDA 0, v + 1, 1
.ENMAC

; Set A and B to 0
.MACRO SETABZ
CMPAB
SWP
CMPAB
v:
VOID 0
LDA 0, v + 1, 1
SWP
LDA 0, v + 1, 1
.ENMAC

; Set B to 1
.MACRO SETB1
v:
VOID 1
LDB 0, v + 1, 8
.ENMAC

.MACRO SETB8
v:
VOID 8
LDB 0, v + 1, 8
.ENMAC

.MACRO SETA1
SWP
SETB1
SWP
.ENMAC

.MACRO LDAB64
LDAB 0, 8
.ENMAC

.MACRO STAB64
STAB 0, 8
.ENMAC

.MACRO INCA64
STB64 TEMP_INC
SETB1
ADDAB
LDB64 TEMP_INC
.ENMAC

.MACRO INC2A64
STB64 TEMP_INC
SETB1
ADDAB
ADDAB
LDB64 TEMP_INC
.ENMAC

.MACRO INC8A64
STB64 TEMP_INC
SETB8
ADDAB
LDB64 TEMP_INC
.ENMAC

.MACRO INCB64
SWP
INCA64
SWP
.ENMAC

.MACRO INC8B64
SWP
INC8A64
SWP
.ENMAC

.MACRO INCA16
STB64 TEMP_INC
SETB1
ADDAB
LDB64 TEMP_INC
.ENMAC

.MACRO INC8A16
STB16 TEMP_INC
SETB8
ADDAB
LDB16 TEMP_INC
.ENMAC

.MACRO INCB16
SWP
INCA16
SWP
.ENMAC

.MACRO INC8B16
SWP
INC8A16
SWP
.ENMAC

.MACRO DECA64
STB64 TEMP_INC
SETB1
SUBAB
LDB64 TEMP_INC
.ENMAC

.MACRO DEC8A64
STB64 TEMP_INC
SETB8
SUBAB
LDB64 TEMP_INC
.ENMAC

.MACRO DECB64
SWP
DECA64
SWP
.ENMAC

.MACRO DEC8B64
SWP
DEC8A64
SWP
.ENMAC

.MACRO DECA16
STB16 TEMP_INC
SETB1
SUBAB
LDB16 TEMP_INC
.ENMAC

.MACRO DEC8A16
STB16 TEMP_INC
SETB8
SUBAB
LDB16 TEMP_INC
.ENMAC

.MACRO DECB16
SWP
DECA16
SWP
.ENMAC

.MACRO DEC8B16
SWP
DEC8A16
SWP
.ENMAC

.MACRO SET64 addr, val
; save state
STA64 TEMP_SET
v:
VOID %val
; set A to value
LDA64 v+1
; set addr to a
STA64 %addr
; reset state
LDA64 TEMP_SET
.ENMAC

.MACRO SET16 addr, val
; save state
STA16 TEMP_SET
v:
VOID %val
; set A to value
LDA16 v+1
; set addr to a
STA16 %addr
; reset state
LDA16 TEMP_SET
.ENMAC

.MACRO SETAV16 val
v:
VOID %val
LDA16 v+1
.ENMAC

.MACRO PUSHA
; save state of B
STB64 TEMP_PUSH
; load stack pointer to B
SETBZ
LDB16 P_STACK
; set *sp to A
STAB64
; inc B by 8 (64bit addr width)
INC8B16
; restore incremented stack pointer
STB16 P_STACK
; restore state of B
LDB64 TEMP_PUSH
.ENMAC

.MACRO CALL addr
STA64 TEMP_CALL
deref:
VOID end_call
LDA64 deref + 1
; voiding addr allows us to grab it from end_call instead
; of running an expensive 64bit macro
VOID %addr
JMP _STDLIB_CALL
end_call:
.ENMAC

.MACRO RET
JMP _STDLIB_RET
.ENMAC

.MACRO PUTA64
; save state of B
STB64 TEMP_PUT
; load stack pointer to B
SETBZ
LDB16 P_STDOUT
; set *sp to A
STAB64
; inc B by 8 (64bit addr width)
INC8B16
; restore incremented stack pointer
STB16 P_STDOUT
; restore state of B
LDB64 TEMP_PUT
.ENMAC

.MACRO PUTA8
; save state of B
STB64 TEMP_PUT
; load stack pointer to B
SETBZ
LDB16 P_STDOUT
; set *sp to A
STB64 put_sta + 1
put_sta:
STA 0, 0, 1
; inc B by 1 (8bit addr width)
SWP
INCA16
SWP
; restore incremented stack pointer
STB16 P_STDOUT
; restore state of B
LDB64 TEMP_PUT
.ENMAC

; print without preserving a register
.MACRO FPRINT str
data:
VOID %str
LDA64 data + 1
PUTA64
.ENMAC

; Rest well king, you did your job and I will miss you
.MACRO JMPA
STA64 jmpa + 1
jmpa:
JMP 0
.ENMAC
