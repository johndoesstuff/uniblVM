JMP _MATH_ENDLIB

.MACRO NOTA
CALL _MATH_NOTA
.ENMAC

_MATH_NOTA:
VOID 0
_MATH_NOTA_B:
VOID 0
STA64 _MATH_NOTA + 1
STB64 _MATH_NOTA_B + 1
LDB64 _MATH_NOTA + 1
NANDAB
LDB64 _MATH_NOTA_B + 1
RET

.MACRO SHL1A
CALL _MATH_SHL1A
.ENMAC

_MATH_SHL1A:
VOID 0
_MATH_SHL1A_B:
VOID 0
STA64 _MATH_SHL1A + 1
STB64 _MATH_SHL1A_B + 1
LDB64 _MATH_SHL1A + 1
ADDAB
LDB64 _MATH_SHL1A_B + 1
RET

; add a to addr
.MACRO ACCA addr
v0:
VOID 0
v1:
VOID %addr
STB64 v0 + 1
LDB64 v1 + 1
CALL _MATH_ACCA
LDB64 v0 + 1
.ENMAC

_MATH_ACCA:
VOID 0
_MATH_ACCA_ADDR:
VOID 0
STA64 _MATH_ACCA + 1
STB64 _MATH_ACCA_ADDR + 1
LDAB64
LDB64 _MATH_ACCA + 1
ADDAB
LDB64 _MATH_ACCA_ADDR + 1
STAB64
LDA64 _MATH_ACCA + 1
RET

.MACRO ANDAB
NANDAB
NOTA
.ENMAC

.MACRO SHR1A
CALL _MATH_SHR1A
.ENMAC

; there is no clever way to do this. welcome to hell
_MATH_SHR1A:
_MATH_SHR1A_SOURCE_MASK:
VOID 2
_MATH_SHR1A_DEST_MASK:
VOID 1
_MATH_SHR1A_COUNTER:
VOID 63
_MATH_SHR1A_ACC:
VOID 0
_MATH_SHR1A_1:
VOID 1
_MATH_SHR1A_A:
VOID 0
_MATH_SHR1A_B:
VOID 0
STA64 _MATH_SHR1A_A + 1
STB64 _MATH_SHR1A_B + 1
_MATH_SHR1A_LOOP:
LDB64 _MATH_SHR1A_SOURCE_MASK + 1
ANDAB
LDB64 _MATH_SHR1A_1 + 1
SUBAB
LDB64 _MATH_SHR1A_DEST_MASK + 1
ANDAB
ACCA _MATH_SHR1A_ACC + 1
LDA64 _MATH_SHR1A_SOURCE_MASK + 1
STA64 _MATH_SHR1A_DEST_MASK + 1
SHL1A
STA64 _MATH_SHR1A_SOURCE_MASK + 1
LDB64 _MATH_SHR1A_1 + 1
LDA64 _MATH_SHR1A_COUNTER + 1
SUBAB
SWP
LDA64 _MATH_SHR1A_A + 1
JMPBZ _MATH_SHR1A_DONE + 1
STB64 _MATH_SHR1A_DONE + 1
JMP _MATH_SHR1A_LOOP
_MATH_SHR1A_DONE:
RET

.MACRO MULAB

.ENMAC

_MATH_ENDLIB:
