INCOMING CHANGES SOON

Notes: If I have to implement another VM operator im crashing out everywhere john pork style
^ 32 shr1a calls taking 835k cycles is absurd. unfortunately since there is just no way to optimize this i may just have to crash out and add a SHRA [val] operator. this is quite unfortunate but implementing multiplication requires many shr calls. 14 ops is getting kinda bloated... however i cant think of any really that i could reasonably remove.. except maybe LDAB and STAB however id have to run the numbers before id feel comfortable taking those out


possibly on the chopping block: SUBAB
heres my reasoning, NANDAB and ADDAB make SUBAB easy to implement. the thing is SUBAB is good for LEQ and GEQ because it mins at zero so it introduces new behaviour. if i can find a way to efficiently emulate that then ill consider removing it.


i need to implement strings of more than 8 characters using <> notation
^ probably should be done in an assembler directive?? idk man

FPRINT <i am a big string>
turns into
FPRINT "i am a b"
FPRINT "ig strin"
FPRINT "g"

ok ive been thinking and i think i need a $DUMP directive to put raw data and i can use <> to represent strings of more than 8 bytes, i really need to clean up a lot of the syntax and ways things are worked out


also also i need to update docs on endianness and make sure the vm specifics are covered especially for the example vm - im not even sure if the example vm is currently working i havent compiled it once lol

<uasmlib/math.uasm> would be goated
- multiplication
- division
- modulus

<uasmlib/float.uasm> would be insanely goated but horrifying to implement so thats later down the line once i have all my bitwise shit sorted out

<uasmlib/string.uasm> for strcmp, strlen, and general string management. need to think of a clever way to store strings in memory that doesnt require a void call every 8 bytes. possibly i implement some kind of malloc in stdlib but i have no idea where i would even attach that in program space. this is a problem for future me to deal with.
